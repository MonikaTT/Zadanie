{stop("Zmienna n nie może być większa niż 8")}
width <- 0.4+n*0.08
return(width)
}
ShowHowMany(data=new.df, name.type = "type")
SettingWidth <- function(n) {
if(n > 8)
{stop("Zmienna n nie może być większa niż 8")}
width <- 0.4+n*0.1
return(width)
}
ShowHowMany(data=new.df, name.type = "type")
SettingWidth(8)
SettingWidth(8)
str(SettingWidth(8))
new.df <- SelectTypeDistance(data = df, latitude = "lat", longtitude = "lng",
name.type = "type", sel.type = c("Streets and Squares"),
sel.dist = 20)
ShowHowMany(data=new.df, name.type = "type")
SettingWidth <- function(n) {
if(!is.numeric(n))
{stop("Zmienna n powinna być typu numeric")}
if(n > 8)
{stop("Zmienna n nie może być większa niż 8")}
width <- 0.3+n*0.12
return(width)
}
ShowHowMany(data=new.df, name.type = "type")
SettingWidth <- function(n) {
if(!is.numeric(n))
{stop("Zmienna n powinna być typu numeric")}
if(n > 8)
{stop("Zmienna n nie może być większa niż 8")}
width <- 0.2+n*0.2
return(width)
}
SettingWidth(8)
SettingWidth <- function(n) {
if(!is.numeric(n))
{stop("Zmienna n powinna być typu numeric")}
if(n > 8)
{stop("Zmienna n nie może być większa niż 8")}
width <- 0.2+n*0.15
return(width)
}
SettingWidth(8)
SettingWidth(1)
SettingWidth(2)
ShowHowMany(data=new.df, name.type = "type")
ShowHowMany <- function(data = NULL, name.type = NULL) {
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Ustalenie parametru n wykorzystywanego do ustalnia parametru width w
#funkcji geom_bar i weryfikacji liczby kategorii, które zostną
#uwzględnione na wykresie
n <- length(ile)
if(n > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
#Ustalanie porządku malejącego w tabeli na potrzeby wykresu
ile <- ile[, V1:=as.factor(V1)]
ile <- ile[, V1:= factor(V1, levels(V1)[order(n)])]
plot <- ggplot2::ggplot(data = ile, mapping = ggplot2::aes(x = V1, y = n)) +
ggplot2::geom_bar(stat = "identity", width = SettingWidth(n), fill = "steelblue") +
ggplot2::labs(title="Liczba poszczególnych rodzjów obiektów w bazie",
size = 12) +
ggplot2::geom_text(ggplot2::aes(label = n), hjust = -0.5, size = 4)
plot <- plot + ggplot2:: theme (
plot.title = ggplot2::element_text(face = "bold"),
axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y =ggplot2::element_blank(),
axis.text.y= ggplot2::element_text(size = 11))
plot <- plot + ggplot2::coord_flip()
plot
}
ShowHowMany(data=new.df, name.type = "type")
new.df <- SelectTypeDistance(data = df, latitude = "lat", longtitude = "lng",
name.type = "type", sel.type = c("Streets and Squares", "Parks and Nature"),
sel.dist = 20)
ShowHowMany(data = new.df, name.type = "type")
document()
document()
document()
document()
library(Zadanie)
document()
ShowHowMany <- function(data = NULL, name.type = NULL) {
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Weryfikacja liczby kategorii obiektów (nn), które zostana pokazane
#na wykresie. Posłuży także ustaleniu parametru width w funkcji geom_bar
nn <- length(ile)
if(nn > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
#Ustalanie porządku malejącego w tabeli na potrzeby wykresu
ile <- ile[, V1:=as.factor(V1)]
ile <- ile[, V1:= factor(V1, levels(V1)[order(n)])]
plot <- ggplot2::ggplot(data = ile, mapping = ggplot2::aes(x = V1, y = n)) +
ggplot2::geom_bar(stat = "identity", width = SettingWidth(nn),
fill = "steelblue") +
ggplot2::labs(title="Liczba poszczególnych rodzjów obiektów w bazie",
size = 12) +
ggplot2::geom_text(ggplot2::aes(label = n), hjust = -0.5, size = 4)
plot <- plot + ggplot2:: theme (
plot.title = ggplot2::element_text(face = "bold"),
axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y =ggplot2::element_blank(),
axis.text.y= ggplot2::element_text(size = 11))
plot <- plot + ggplot2::coord_flip()
plot
}
new.df <- SelectTypeDistance(data = df, latitude = "lat", longtitude = "lng",
name.type = "type", sel.type = c("Streets and Squares", "Parks and Nature"),
sel.dist = 20)
ShowHowMany(data = new.df, name.type = "type")
SettingWidth <- function(n = NULL) {
if(!is.numeric(n))
{stop("Zmienna n powinna być typu numeric")}
if(n > 8)
{stop("Zmienna n nie może być większa niż 8")}
width <- 0.2+n*0.15
return(width)
}
new.df <- SelectTypeDistance(data = df, latitude = "lat", longtitude = "lng",
name.type = "type", sel.type = c("Streets and Squares", "Parks and Nature"),
sel.dist = 20)
ShowHowMany(data = new.df, name.type = "type")
document()
document()
document()
document()
document()
check()
document()
check()
document()
document()
check()
SettingWidth()
n <- lenght(unique(df$type))
SettingWidth(n)}
n <- lenght(unique(df$type))
SettingWidth(n)
n <- lenght(unique(df$type))
n <- length(unique(df$type))
SettingWidth(n)
document()
test_that("testowanie formatu zmiennej data",{
n <- "a"
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być typu numeric"))
})
test_that("testowanie formatu zmiennej data",{
n <- c(0, 1.233, 9)
expect_that(SettingWidth(n),
throws_error("dim(n) powinien być równy 1"))
})
n <- c(0, 1.233, 9)
str(n)
length(n)
dim(n)
length(n) != 1
dim(n)
test_that("testowanie formatu zmiennej data",{
n <- c(0, 1.233, 9)
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być pojedyczną liczbą"))
})
SettingWidth(n)
SettingWidth <- function(n = NULL) {
if(!is.numeric(n))
{stop("Zmienna n powinna być typu numeric")}
if(length(n) != 1)
{stop("Zmienna n powinna być pojedyczną liczbą")}
if(n > 8)
{stop("Zmienna n nie może być większa niż 8")}
width <- 0.2+n*0.15
return(width)
}
test_that("testowanie wymiarów zmiennej n",{
n <- c(0, 1.233, 9)
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być pojedyczną liczbą"))
})
n <- as.data.frame(c(0, 1.233, 9))
n
test_that("testowanie wymiarów zmiennej n",{
n <- as.data.frame(c(0, 1.233, 9))
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być pojedyczną liczbą"))
})
str(n)
n<-as.matrix(n)
n
SettingWidth(n)
test_that("testowanie wymiarów zmiennej n",{
n <- as.data.frame(cbind(0, 1.233, 9))
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być pojedyczną liczbą"))
})
n <- as.data.frame(cbind(0, 1.233, 9))
n
SettingWidth(n)
str(n)
SettingWidth(n$V1)
context("testowanie zmiennych na wejściu")
test_that("testowanie formatu zmiennej n",{
n <- "a"
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być typu numeric"))
})
test_that("testowanie wymiarów zmiennej n",{
n <- as.data.frame(cbind(0, 1.233, 9))
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być typu numeric"))
})
test_that("testowanie wymiarów zmiennej n",{
n <- c(0, 1.233, 9)
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być pojedyczną liczbą"))
})
test_that("testowanie wartości zmiennej n",{
n <- 10
expect_that(SettingWidth(n),
throws_error("Zmienna n nie może być większa niż 8"))
})
context("testowanie zmiennych na wejściu")
test_that("testowanie formatu zmiennej n",{
n <- "a"
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być typu numeric"))
})
test_that("testowanie wymiarów zmiennej n",{
n <- as.data.frame(cbind(0, 1.233, 9))
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być typu numeric"))
})
test_that("testowanie wymiarów zmiennej n",{
n <- c(0, 1.233, 9)
expect_that(SettingWidth(n),
throws_error("Zmienna n powinna być pojedyczną liczbą"))
})
test_that("testowanie wartości zmiennej n",{
n <- 10
expect_that(SettingWidth(n),
throws_error("Zmienna n nie może być większa niż 8"))
})
test_that("wynik jest wartością numeryczną",{
n <- 7
expect_that(SettingWidth(n), is_a("numeric"))
})
str(df)
test_that("testowanie formatu zmiennej data",{
df <- df[, type:=as.factor(type)]
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument name.type powinien być typu character"))
})
ShowHowMany(data = df, name.type = "type")
ShowHowMany <- function(data = NULL, name.type = NULL) {
if(!is.data.frame(data))
{stop("Argument data powinien być typu data.frame")}
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Weryfikacja liczby kategorii obiektów (nn), które zostana pokazane
#na wykresie. Posłuży także ustaleniu parametru width w funkcji geom_bar
nn <- length(ile)
if(nn > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
#Ustalanie porządku malejącego w tabeli na potrzeby wykresu
ile <- ile[, V1:=as.factor(V1)]
ile <- ile[, V1:= factor(V1, levels(V1)[order(n)])]
plot <- ggplot2::ggplot(data = ile, mapping = ggplot2::aes(x = V1, y = n)) +
ggplot2::geom_bar(stat = "identity", width = SettingWidth(nn),
fill = "steelblue") +
ggplot2::labs(title="Liczba poszczególnych rodzjów obiektów w bazie",
size = 12) +
ggplot2::geom_text(ggplot2::aes(label = n), hjust = -0.5, size = 4)
plot <- plot + ggplot2:: theme (
plot.title = ggplot2::element_text(face = "bold"),
axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y =ggplot2::element_blank(),
axis.text.y= ggplot2::element_text(size = 11))
plot <- plot + ggplot2::coord_flip()
plot
}
new.df <- SelectTypeDistance(data = df, latitude = "lat", longtitude = "lng",
name.type = "type", sel.type = c("Streets and Squares", "Parks and Nature"),
sel.dist = 20)
ShowHowMany(data = new.df, name.type = "type")
test_that("testowanie formatu zmiennej data",{
df <- as.list(df)
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument name.type powinien być typu character"))
})
test_that("testowanie formatu zmiennej data",{
df <- as.list(df)
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument data powinien być typu data.frame"))
})
test_that("testowanie formatu zmiennej data",{
df <- as.list(df)
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument data powinien być typu data.frame"))
})
ShowHowMany(data=as.data.frame(df$type), name.type = "type")
str(df$type)
df$type<-as.character(df$type)
ShowHowMany(data=as.data.frame(df$type), name.type = "type")
ShowHowMany(data=as.data.frame(df$type, stringsAsFactors = FALSE), name.type = "type")
a<-df$type
str(a)
ShowHowMany(a)
ShowHowMany(as.data.frame(a))
a <- as.data.frame(a)
a
str(a)
names(a)
a$a<-as.character(a$a)
ShowHowMany(a, name.type = "a")
?ggplot2::geom_bar
?sample
a <- df[, type:=sample(x = letters[1:12], size = nrow(df), replace = TRUE)]
a
a
context("testowanie zmiennych na wejściu")
test_that("testowanie formatu zmiennej data",{
df <- as.list(df)
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument data powinien być typu data.frame"))
})
test_that("testowanie formatu zmiennej name.type",{
df <- df[, type:=as.factor(type)]
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument name.type powinien być typu character"))
})
test_that("testowanie liczby kategorii zmiennej name.type",{
df <- df[, type:=sample(x = letters[1:12], size = nrow(df), replace = TRUE)]
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Zmienna name.type może mieć maksymanie 8 kategorii"))
})
ShowHowMany(data=a, name.type = "type")
length(unique(a$type))
length(unique(a$type))>8
ShowHowMany <- function(data = NULL, name.type = NULL) {
if(!is.data.frame(data))
{stop("Argument data powinien być typu data.frame")}
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Weryfikacja liczby kategorii obiektów (nn), które zostana pokazane
#na wykresie. Posłuży także ustaleniu parametru width w funkcji geom_bar
nn <- length(ile)
if(nn > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
#Ustalanie porządku malejącego w tabeli na potrzeby wykresu
ile <- ile[, V1:=as.factor(V1)]
ile <- ile[, V1:= factor(V1, levels(V1)[order(n)])]
plot <- ggplot2::ggplot(data = ile, mapping = ggplot2::aes(x = V1, y = n)) +
ggplot2::geom_bar(stat = "identity", width = SettingWidth(nn),
fill = "steelblue") +
ggplot2::labs(title="Liczba poszczególnych rodzajów obiektów w bazie",
size = 12) +
ggplot2::geom_text(ggplot2::aes(label = n), hjust = -0.5, size = 4)
plot <- plot + ggplot2:: theme (
plot.title = ggplot2::element_text(face = "bold"),
axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y =ggplot2::element_blank(),
axis.text.y= ggplot2::element_text(size = 11))
plot <- plot + ggplot2::coord_flip()
plot
}
ShowHowMany(data = a, name.type = "type")
Show <- function(data = NULL, name.type = NULL) {
if(!is.data.frame(data))
{stop("Argument data powinien być typu data.frame")}
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Weryfikacja liczby kategorii obiektów (nn), które zostana pokazane
#na wykresie. Posłuży także ustaleniu parametru width w funkcji geom_bar
nn <- length(ile)
if(nn > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
return(nn)
}
Show(dane=df, name.type = "type")
Show(data=df, name.type = "type")
Show <- function(data = NULL, name.type = NULL) {
if(!is.data.frame(data))
{stop("Argument data powinien być typu data.frame")}
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Weryfikacja liczby kategorii obiektów (nn), które zostana pokazane
#na wykresie. Posłuży także ustaleniu parametru width w funkcji geom_bar
nn <- nrow(ile)
if(nn > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
return(nn)
}
Show(data=df, name.type = "type")
ShowHowMany <- function(data = NULL, name.type = NULL) {
if(!is.data.frame(data))
{stop("Argument data powinien być typu data.frame")}
if(!is.character(data[[name.type]]))
{stop("Argument name.type powinien być typu character")}
#Przygotowanie tabeli danych na potrzeby wykresu
ile <- data.table::data.table(data[[name.type]])
data.table::setkey(ile, V1)
ile <- ile[, n:=.N, by=V1]
ile <- unique(ile)
#Weryfikacja liczby kategorii obiektów (nn), które zostana pokazane
#na wykresie. Posłuży także ustaleniu parametru width w funkcji geom_bar
nn <- nrow(ile)
if(nn > 8)
{stop("Zmienna name.type może mieć maksymanie 8 kategorii")}
#Ustalanie porządku malejącego w tabeli na potrzeby wykresu
ile <- ile[, V1:=as.factor(V1)]
ile <- ile[, V1:= factor(V1, levels(V1)[order(n)])]
plot <- ggplot2::ggplot(data = ile, mapping = ggplot2::aes(x = V1, y = n)) +
ggplot2::geom_bar(stat = "identity", width = SettingWidth(nn),
fill = "steelblue") +
ggplot2::labs(title="Liczba poszczególnych rodzajów obiektów w bazie",
size = 12) +
ggplot2::geom_text(ggplot2::aes(label = n), hjust = -0.5, size = 4)
plot <- plot + ggplot2:: theme (
plot.title = ggplot2::element_text(face = "bold"),
axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y =ggplot2::element_blank(),
axis.text.y= ggplot2::element_text(size = 11))
plot <- plot + ggplot2::coord_flip()
plot
}
context("testowanie zmiennych na wejściu")
test_that("testowanie formatu zmiennej data",{
df <- as.list(df)
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument data powinien być typu data.frame"))
})
test_that("testowanie formatu zmiennej name.type",{
df <- df[, type:=as.factor(type)]
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Argument name.type powinien być typu character"))
})
test_that("testowanie liczby kategorii zmiennej name.type",{
df <- df[, type:=sample(x = letters[1:12], size = nrow(df), replace = TRUE)]
expect_that(ShowHowMany(data = df, name.type = "type"),
throws_error("Zmienna name.type może mieć maksymanie 8 kategorii"))
})
document()
library(Zadanie)
document()
check()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
check()
library(Zadanie)
load_all(pkg = "Zadanie")
getwd()
load_all(pkg = "/Users/monikatraple/Documents/7N/Zadanie")
test("/Users/monikatraple/Documents/7N/Zadanie")
test()
document()
document()
load_all(Krakow)
load_all(pkg = "/Users/monikatraple/Documents/7N/Krakow")
